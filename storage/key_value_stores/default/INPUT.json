{
    "abortRuns": true,
    "defaultTimeout": 900000,
    "retryFailedTests": true,
    "email": "gustavo@trudax.tech",
    "testSpec": "({\n    it,\n    xit,\n    run,\n    expect,\n    expectAsync,\n    input,\n    moment,\n    describe,\n}) => {\n    ['beta', 'latest'].forEach((build) => {\n        describe(`Reddit scraper (${build} version)`, () => {\n            it('should search for posts succefully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 0,\n                        maxCommunitiesAndUsers: 0,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 10,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: true,\n                        searchUsers: false,\n                        searches: ['pizza'],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Post Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(0.1 * 60000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const post of results) {\n                            expect(post.id)\n                                .withContext(runResult.format('Id'))\n                                .toBeNonEmptyString();\n\n                            expect(post.parsedId)\n                                .withContext(runResult.format('Parsed Id'))\n                                .toBeNonEmptyString();\n\n                            expect(post.url)\n                                .withContext(runResult.format('Url'))\n                                .toStartWith('https://www.reddit.com/r/');\n\n                            expect(post.username)\n                                .withContext(runResult.format('Username'))\n                                .toBeNonEmptyString();\n\n                            expect(post.title)\n                                .withContext(runResult.format('Title'))\n                                .toBeNonEmptyString();\n\n                            expect(post.communityName)\n                                .withContext(runResult.format('Community Name'))\n                                .toBeNonEmptyString();\n\n                            expect(post.parsedCommunityName)\n                                .withContext(\n                                    runResult.format('Parsed Community Name'),\n                                )\n                                .toBeNonEmptyString();\n\n                            expect(post.parsedCommunityName)\n                                .withContext(\n                                    runResult.format('Parsed Community Name'),\n                                )\n                                .toBeNonEmptyString();\n\n                            expect(post.body)\n                                .withContext(runResult.format('Body'))\n                                .toBeNonEmptyString();\n\n                            expect(post.createdAt)\n                                .withContext(runResult.format('Created At'))\n                                .toBeNonEmptyString();\n\n                            expect(post.dataType)\n                                .withContext(runResult.format('Data Type'))\n                                .toBe('post');\n                        }\n                    },\n                );\n            });\n            it('should search for comments succefully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 10,\n                        maxCommunitiesAndUsers: 0,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 0,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: true,\n                        searchCommunities: false,\n                        searchPosts: false,\n                        searchUsers: false,\n                        searches: ['pizza'],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Comments Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(0.1 * 60000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const comment of results) {\n                            expect(comment.id)\n                                .withContext(runResult.format('Id'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.parsedId)\n                                .withContext(runResult.format('Parsed Id'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.url)\n                                .withContext(runResult.format('Url'))\n                                .toStartWith('https://www.reddit.com/r/');\n\n                            expect(comment.parentId)\n                                .withContext(runResult.format('Parent Id'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.username)\n                                .withContext(runResult.format('Username'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.category)\n                                .withContext(runResult.format('Category'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.communityName)\n                                .withContext(runResult.format('Community Name'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.body)\n                                .withContext(runResult.format('Body'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.createdAt)\n                                .withContext(runResult.format('Created At'))\n                                .toBeNonEmptyString();\n\n                            expect(comment.upVotes)\n                                .withContext(runResult.format('Up Votes'))\n                                .toBeInstanceOf(Number);\n\n                            expect(comment.numberOfreplies)\n                                .withContext(\n                                    runResult.format('Number of replies'),\n                                )\n                                .toBeInstanceOf(Number);\n\n                            expect(comment.dataType)\n                                .withContext(runResult.format('Data Type'))\n                                .toBe('comment');\n                        }\n                    },\n                );\n            });\n\n            it('should search for users succefully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 0,\n                        maxCommunitiesAndUsers: 10,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 0,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: false,\n                        searchUsers: true,\n                        searches: ['pizza'],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Users Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(0.1 * 60000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const post of results) {\n                            expect(post.id)\n                                .withContext(runResult.format('Id'))\n                                .toBeNonEmptyString();\n\n                            expect(post.parsedId)\n                                .withContext(runResult.format('Parsed Id'))\n                                .toBeNonEmptyString();\n\n                            expect(post.url)\n                                .withContext(runResult.format('Url'))\n                                .toStartWith('https://www.reddit.com/r/');\n\n                            expect(post.username)\n                                .withContext(runResult.format('Username'))\n                                .toBeNonEmptyString();\n\n                            expect(post.title)\n                                .withContext(runResult.format('Title'))\n                                .toBeNonEmptyString();\n\n                            expect(post.communityName)\n                                .withContext(runResult.format('Community Name'))\n                                .toBeNonEmptyString();\n\n                            expect(post.parsedCommunityName)\n                                .withContext(\n                                    runResult.format('Parsed Community Name'),\n                                )\n                                .toBeNonEmptyString();\n\n                            expect(post.parsedCommunityName)\n                                .withContext(\n                                    runResult.format('Parsed Community Name'),\n                                )\n                                .toBeNonEmptyString();\n\n                            expect(post.body)\n                                .withContext(runResult.format('Body'))\n                                .toBeNonEmptyString();\n\n                            expect(post.createdAt)\n                                .withContext(runResult.format('Created At'))\n                                .toBeNonEmptyString();\n\n                            expect(post.dataType)\n                                .withContext(runResult.format('Data Type'))\n                                .toBe('post');\n                        }\n                    },\n                );\n            });\n            // it('works with url input for community, post and user (reddit-url)', async () => {\n            //     // it would be great to support other types of url but none other is working at the moment\n            //     const runResult = await run({\n            //         taskId: 'A3K29MChfzrcZykXX',\n            //         options: {\n            //             build,\n            //         },\n            //     });\n\n            //     await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n            //     await expectAsync(runResult).withLog((log) => {\n            //         expect(log)\n            //             .withContext(runResult.format('Log ReferenceError'))\n            //             .not.toContain('ReferenceError');\n            //         expect(log)\n            //             .withContext(runResult.format('Log TypeError'))\n            //             .not.toContain('TypeError');\n            //     });\n\n            //     await expectAsync(runResult).withStatistics((stats) => {\n            //         expect(stats.requestsRetries)\n            //             .withContext(runResult.format('Request retries'))\n            //             .toBeLessThan(3);\n            //         expect(stats.crawlerRuntimeMillis)\n            //             .withContext(runResult.format('Run time'))\n            //             .toBeWithinRange(0.1 * 60000, 10 * 60000);\n            //     });\n\n            //     await expectAsync(runResult).withDataset(\n            //         ({ dataset, info }) => {\n            //             expect(info.cleanItemCount)\n            //                 .withContext(\n            //                     runResult.format('Dataset cleanItemCount'),\n            //                 )\n            //                 .toBeWithinRange(2, 6);\n            //             // I would like it to be 3 as stated in input, but doesnt work like that in the moment - have always more\n\n            //             expect(dataset.items)\n            //                 .withContext(\n            //                     runResult.format('Dataset items array'),\n            //                 )\n            //                 .toBeNonEmptyArray();\n\n            //             const results = dataset.items;\n\n            //             let post;\n            //             let community;\n            //             let comment;\n\n            //             for (const r in results) {\n            //                 if (results[r].dataType === 'post') {\n            //                     post = results[r];\n            //                 }\n            //                 if (results[r].dataType === 'community') {\n            //                     community = results[r];\n            //                 }\n            //                 if (results[r].dataType === 'user-comments') {\n            //                     comment = results[r];\n            //                 }\n            //             }\n\n            //             // checking the post\n            //             expect(post.postUrl)\n            //                 .withContext(runResult.format('Post url'))\n            //                 .toBe(\n            //                     'https://www.reddit.com/r/nasa/comments/lcllo8/biden_press_sec_jen_psaki_affirms_admin_support/',\n            //                 );\n\n            //             expect(post.communityName)\n            //                 .withContext(\n            //                     runResult.format('Post community name'),\n            //                 )\n            //                 .toBe('r/nasa');\n\n            //             expect(post.numberOfVotes)\n            //                 .withContext(\n            //                     runResult.format('Post number of votes'),\n            //                 )\n            //                 .toBeGreaterThan(20000);\n\n            //             expect(post.postedBy)\n            //                 .withContext(runResult.format('Post posted by'))\n            //                 .toBe('u/RadionSPW');\n\n            //             // expect(post.postedDate)\n            //             //     .withContext(runResult.format('Post posted date'))\n            //             //     .toStartWith('2021-02-05');\n\n            //             expect(post.title)\n            //                 .withContext(runResult.format('Post title'))\n            //                 .toBe(\n            //                     'Biden Press Sec Jen Psaki Affirms Admin Support for Artemis Program',\n            //                 );\n\n            //             expect(post.comments)\n            //                 .withContext(runResult.format('Post comments'))\n            //                 .toBeNonEmptyArray();\n\n            //             // checking the community\n            //             expect(community.title)\n            //                 .withContext(runResult.format('Community title'))\n            //                 .toBe('Minecraft on reddit');\n\n            //             expect(community.title2)\n            //                 .withContext(runResult.format('Community title2'))\n            //                 .toBe('r/Minecraft');\n\n            //             expect(community.createdAt)\n            //                 .withContext(\n            //                     runResult.format('Community created at'),\n            //                 )\n            //                 .toBe('2009-06-11T00:00:00.000Z');\n\n            //             expect(community.members)\n            //                 .withContext(runResult.format('Community members'))\n            //                 .toBeGreaterThan(111111);\n            //             // make it bigger when fixed\n\n            //             expect(community.moderators)\n            //                 .withContext(\n            //                     runResult.format('Community moderators'),\n            //                 )\n            //                 .toBeNonEmptyArray();\n\n            //             expect(community.moderators)\n            //                 .withContext(\n            //                     runResult.format(\n            //                         'Community moderators contains',\n            //                     ),\n            //                 )\n            //                 .toContain('BritishEnglishPolice');\n\n            //             expect(community.communityUrl)\n            //                 .withContext(runResult.format('Community url'))\n            //                 .toBe('https://www.reddit.com/r/Minecraft/');\n\n            //             expect(community.posts)\n            //                 .withContext(runResult.format('Community posts'))\n            //                 .toBeNonEmptyArray();\n\n            //             expect(community.posts.length)\n            //                 .withContext(\n            //                     runResult.format('Community posts length'),\n            //                 )\n            //                 .toBe(3);\n\n            //             // checking the comment\n            //             expect(comment.user)\n            //                 .withContext(runResult.format('Comment user'))\n            //                 .toBe('lukaskrivka');\n\n            //             expect(comment.userUrl)\n            //                 .withContext(runResult.format('Comment user url'))\n            //                 .toBe('https://www.reddit.com/user/lukaskrivka/');\n\n            //             expect(comment.comments)\n            //                 .withContext(runResult.format('Comment comments'))\n            //                 .toBeNonEmptyArray();\n            //         },\n            //     );\n            // });\n            // it('works with search term for posts (reddit-search-post-date)', async () => {\n            //     const runResult = await run({\n            //         taskId: 'HCrcjOjHkVapBLLGG',\n            //         options: {\n            //             build,\n            //         },\n            //     });\n\n            //     await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n            //     await expectAsync(runResult).withLog((log) => {\n            //         expect(log)\n            //             .withContext(runResult.format('Log ReferenceError'))\n            //             .not.toContain('ReferenceError');\n            //         expect(log)\n            //             .withContext(runResult.format('Log TypeError'))\n            //             .not.toContain('TypeError');\n            //     });\n\n            //     await expectAsync(runResult).withStatistics((stats) => {\n            //         expect(stats.requestsRetries)\n            //             .withContext(runResult.format('Request retries'))\n            //             .toBeLessThan(3);\n            //         expect(stats.crawlerRuntimeMillis)\n            //             .withContext(runResult.format('Run time'))\n            //             .toBeWithinRange(0.1 * 60000, 10 * 60000);\n            //     });\n\n            //     await expectAsync(runResult).withDataset(\n            //         ({ dataset, info }) => {\n            //             expect(info.cleanItemCount)\n            //                 .withContext(\n            //                     runResult.format('Dataset cleanItemCount'),\n            //                 )\n            //                 .toBe(3);\n\n            //             expect(dataset.items)\n            //                 .withContext(\n            //                     runResult.format('Dataset items array'),\n            //                 )\n            //                 .toBeNonEmptyArray();\n\n            //             const results = dataset.items;\n\n            //             for (const r in results) {\n            //                 expect(results[r].dataType)\n            //                     .withContext(runResult.format('Data type'))\n            //                     .toBe('post');\n\n            //                 expect(results[r].postUrl)\n            //                     .withContext(runResult.format('Post url'))\n            //                     .toStartWith('https://www.reddit.com/');\n\n            //                 expect(results[r].communityName)\n            //                     .withContext(runResult.format('Community name'))\n            //                     .toStartWith('r/');\n\n            //                 expect(results[r].communityUrl)\n            //                     .withContext(runResult.format('Community url'))\n            //                     .toStartWith('https://www.reddit.com/r/');\n\n            //                 expect(results[r].numberOfVotes)\n            //                     .withContext(\n            //                         runResult.format('Number of votes'),\n            //                     )\n            //                     .toBeGreaterThan(10);\n\n            //                 expect(results[r].title.toLowerCase())\n            //                     .withContext(runResult.format('Post title'))\n            //                     .toContain('fun');\n\n            //                 expect(results[r].comments)\n            //                     .withContext(runResult.format('Comments'))\n            //                     .toBeNonEmptyArray();\n\n            //                 expect(\n            //                     moment()\n            //                         .subtract(24, 'hour')\n            //                         .diff(results[r].postedDate),\n            //                 )\n            //                     .withContext(runResult.format('Post date'))\n            //                     .toBeLessThan(0);\n            //             }\n            //         },\n            //     );\n            // });\n            // it('search term for communities (\"reddit-search-communities\")', async () => {\n            //     const runResult = await run({\n            //         taskId: 'QmfQoVf7KSFebAIXB',\n            //         options: {\n            //             build,\n            //         },\n            //     });\n\n            //     await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n            //     await expectAsync(runResult).withLog((log) => {\n            //         expect(log)\n            //             .withContext(runResult.format('Log ReferenceError'))\n            //             .not.toContain('ReferenceError');\n            //         expect(log)\n            //             .withContext(runResult.format('Log TypeError'))\n            //             .not.toContain('TypeError');\n            //     });\n\n            //     await expectAsync(runResult).withStatistics((stats) => {\n            //         expect(stats.requestsRetries)\n            //             .withContext(runResult.format('Request retries'))\n            //             .toBeLessThan(3);\n            //         expect(stats.crawlerRuntimeMillis)\n            //             .withContext(runResult.format('Run time'))\n            //             .toBeWithinRange(1 * 60, 10 * 60000);\n            //     });\n\n            //     await expectAsync(runResult).withDataset(\n            //         ({ dataset, info }) => {\n            //             expect(info.cleanItemCount)\n            //                 .withContext(\n            //                     runResult.format('Dataset cleanItemCount'),\n            //                 )\n            //                 .toBe(3);\n\n            //             expect(dataset.items)\n            //                 .withContext(\n            //                     runResult.format('Dataset items array'),\n            //                 )\n            //                 .toBeNonEmptyArray();\n\n            //             const results = dataset.items;\n\n            //             let isCorrectPosts = false;\n            //             let isCorrectPostNumber = false;\n\n            //             for (const r in results) {\n            //                 if (Array.isArray(results[r].posts)) {\n            //                     isCorrectPosts = true;\n            //                 }\n            //                 if (results[r].posts?.length > 0) {\n            //                     isCorrectPostNumber = true;\n            //                 }\n\n            //                 expect(results[r].title)\n            //                     .withContext(\n            //                         runResult.format('Community title'),\n            //                     )\n            //                     .toBeNonEmptyString();\n\n            //                 expect(results[r].members)\n            //                     .withContext(\n            //                         runResult.format(\n            //                             'Number of community members',\n            //                         ),\n            //                     )\n            //                     .toBeGreaterThan(1000);\n\n            //                 expect(results[r].moderators)\n            //                     .withContext(\n            //                         runResult.format('Community moderators'),\n            //                     )\n            //                     .toBeNonEmptyArray();\n\n            //                 expect(results[r].communityUrl)\n            //                     .withContext(runResult.format('Community url'))\n            //                     .toStartWith('https://www.reddit.com/r/');\n\n            //                 expect(results[r].category)\n            //                     .withContext(\n            //                         runResult.format('Community category'),\n            //                     )\n            //                     .toBeNonEmptyString();\n\n            //                 expect(results[r].dataType)\n            //                     .withContext(runResult.format('Data type'))\n            //                     .toBe('community');\n            //             }\n            //             expect(isCorrectPosts)\n            //                 .withContext(runResult.format('Community posts'))\n            //                 .toBe(true);\n\n            //             expect(isCorrectPostNumber)\n            //                 .withContext(\n            //                     runResult.format('Community posts number'),\n            //                 )\n            //                 .toBe(true);\n            //         },\n            //     );\n            // });\n            // it('search term for url from gslink, community channel and popular (\"reddit-gslink\")', async () => {\n            //     const runResult = await run({\n            //         taskId: 'jQaE940zqPLsvgzkq',\n            //         options: {\n            //             build,\n            //         },\n            //     });\n\n            //     await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n            //     await expectAsync(runResult).withLog((log) => {\n            //         expect(log)\n            //             .withContext(runResult.format('Log ReferenceError'))\n            //             .not.toContain('ReferenceError');\n            //         expect(log)\n            //             .withContext(runResult.format('Log TypeError'))\n            //             .not.toContain('TypeError');\n            //     });\n\n            //     await expectAsync(runResult).withStatistics((stats) => {\n            //         expect(stats.requestsRetries)\n            //             .withContext(runResult.format('Request retries'))\n            //             .toBeLessThan(3);\n            //         expect(stats.crawlerRuntimeMillis)\n            //             .withContext(runResult.format('Run time'))\n            //             .toBeWithinRange(1 * 60, 10 * 60000);\n            //     });\n\n            //     await expectAsync(runResult).withDataset(\n            //         ({ dataset, info }) => {\n            //             expect(info.cleanItemCount)\n            //                 .withContext(\n            //                     runResult.format('Dataset cleanItemCount'),\n            //                 )\n            //                 .toBe(3);\n\n            //             expect(dataset.items)\n            //                 .withContext(\n            //                     runResult.format('Dataset items array'),\n            //                 )\n            //                 .toBeNonEmptyArray();\n\n            //             const results = dataset.items;\n\n            //             for (const r in results) {\n            //                 expect(results[r].title)\n            //                     .withContext(\n            //                         runResult.format('Community title'),\n            //                     )\n            //                     .toBe('popular');\n\n            //                 expect(results[r].category)\n            //                     .withContext(\n            //                         runResult.format('Community category'),\n            //                     )\n            //                     .toBeNonEmptyString();\n\n            //                 expect(results[r].dataType)\n            //                     .withContext(runResult.format('Data type'))\n            //                     .toBe('community');\n\n            //                 expect(results[r].posts)\n            //                     .withContext(\n            //                         runResult.format('Community posts'),\n            //                     )\n            //                     .toBeNonEmptyArray();\n\n            //                 expect(results[r].posts.length)\n            //                     .withContext(\n            //                         runResult.format('Community posts number'),\n            //                     )\n            //                     .toBe(1);\n            //             }\n            //         },\n            //     );\n            // });\n        });\n    });\n}",
    "verboseLogs": true
}
