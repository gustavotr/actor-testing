{
  "abortRuns": true,
  "defaultTimeout": 900000,
  "retryFailedTests": true,
  "email": "gustavo@trudax.tech",
  "testSpec": "({\n    it,\n    xit,\n    run,\n    expect,\n    expectAsync,\n    input,\n    moment,\n    describe,\n}) => {\n    const checkPost = (post, runResult) => {\n        if (post.dataType !== 'post') {\n            return;\n        }\n        expect(post.id)\n            .withContext(runResult.format('Post Id'))\n            .toBeNonEmptyString();\n\n        expect(post.parsedId)\n            .withContext(runResult.format('Post Parsed Id'))\n            .toBeNonEmptyString();\n\n        expect(post.url)\n            .withContext(runResult.format('Post Url'))\n            .toStartWith('https://www.reddit.com/r/');\n\n        expect(post.username)\n            .withContext(runResult.format('Post Username'))\n            .toBeNonEmptyString();\n\n        expect(post.title)\n            .withContext(runResult.format('Post Title'))\n            .toBeNonEmptyString();\n\n        expect(post.communityName)\n            .withContext(runResult.format('Post Community Name'))\n            .toBeNonEmptyString();\n\n        expect(post.parsedCommunityName)\n            .withContext(runResult.format('Post Parsed Community Name'))\n            .toBeNonEmptyString();\n\n        expect(typeof post.body === 'string' || !post.body)\n            .withContext(runResult.format('Post Body'))\n            .toBe(true);\n\n        expect(post.createdAt)\n            .withContext(runResult.format('Post Created At'))\n            .toBeNonEmptyString();\n\n        expect(post.dataType)\n            .withContext(runResult.format('Post Data Type'))\n            .toBe('post');\n    };\n\n    const checkCommunity = (community, runResult) => {\n        if (community.dataType !== 'community') {\n            return;\n        }\n        expect(community.title)\n            .withContext(runResult.format('Community title'))\n            .toBeNonEmptyString();\n\n        expect(community.createdAt)\n            .withContext(runResult.format('Community created at'))\n            .toBeNonEmptyString();\n\n        expect(typeof community.members === 'number' || !community.members)\n            .withContext(runResult.format('Community members'))\n            .toBe(true);\n\n        expect(community.moderators?.length > 0 || !community.moderators)\n            .withContext(runResult.format('Community moderators'))\n            .toBe(true);\n\n        expect(community.url)\n            .withContext(runResult.format('Community url'))\n            .toStartWith('https://www.reddit.com/r/');\n    };\n\n    const checkComment = (comment, runResult) => {\n        if (comment.dataType !== 'comment') {\n            return;\n        }\n        expect(comment.id)\n            .withContext(runResult.format('Comment Id'))\n            .toBeNonEmptyString();\n\n        expect(comment.parsedId)\n            .withContext(runResult.format('Comment Parsed Id'))\n            .toBeNonEmptyString();\n\n        expect(comment.url)\n            .withContext(runResult.format('Comment Url'))\n            .toStartWith('https://www.reddit.com/r/');\n\n        expect(comment.parentId)\n            .withContext(runResult.format('Comment Parent Id'))\n            .toBeNonEmptyString();\n\n        expect(comment.username)\n            .withContext(runResult.format('Comment Username'))\n            .toBeNonEmptyString();\n\n        expect(comment.category)\n            .withContext(runResult.format('Comment Category'))\n            .toBeNonEmptyString();\n\n        expect(comment.communityName)\n            .withContext(runResult.format('Comment Community Name'))\n            .toBeNonEmptyString();\n\n        expect(comment.body)\n            .withContext(runResult.format('Comment Body'))\n            .toBeNonEmptyString();\n\n        expect(comment.createdAt)\n            .withContext(runResult.format('Comment Created At'))\n            .toBeNonEmptyString();\n\n        expect(comment.upVotes)\n            .withContext(runResult.format('Comment Up Votes'))\n            .toBeInstanceOf(Number);\n\n        expect(comment.numberOfreplies)\n            .withContext(runResult.format('Comment Number of replies'))\n            .toBeInstanceOf(Number);\n\n        expect(comment.dataType)\n            .withContext(runResult.format('Comment Data Type'))\n            .toBe('comment');\n    };\n\n    const checkUser = (user, runResult) => {\n        if (user.dataType !== 'user') {\n            return;\n        }\n        expect(user.id)\n            .withContext(runResult.format('User Id'))\n            .toBeNonEmptyString();\n\n        expect(user.url)\n            .withContext(runResult.format('User Url'))\n            .toStartWith('https://www.reddit.com/user/');\n\n        expect(user.username)\n            .withContext(runResult.format('User Username'))\n            .toBeNonEmptyString();\n\n        expect(user.userIcon)\n            .withContext(runResult.format('User Icon'))\n            .toBeNonEmptyString();\n\n        expect(user.karma)\n            .withContext(runResult.format('User Karma'))\n            .toBeInstanceOf(Number);\n\n        expect(user.createdAt)\n            .withContext(runResult.format('User Created At'))\n            .toBeNonEmptyString();\n\n        expect(user.scrapedAt)\n            .withContext(runResult.format('User Scraped At'))\n            .toBeNonEmptyString();\n\n        expect(user.over18)\n            .withContext(runResult.format('User Over 18'))\n            .toBeInstanceOf(Boolean);\n\n        expect(user.dataType)\n            .withContext(runResult.format('User Data Type'))\n            .toBe('user');\n    };\n\n    ['beta', 'latest'].forEach((build) => {\n        describe(`Reddit scraper (${build} version)`, () => {\n            it('should search for posts successfully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 0,\n                        maxCommunitiesCount: 0,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 10,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: true,\n                        searchUsers: false,\n                        searches: ['pizza'],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Post Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n                        for (const post of results) {\n                            checkPost(post, runResult);\n                        }\n                    },\n                );\n            });\n\n            it('should search for posts using a start url successfully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 0,\n                        maxCommunitiesCount: 0,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 10,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: true,\n                        searchUsers: false,\n                        searches: [],\n                        startUrls: [\n                            { url: 'https://www.reddit.com/search/?q=networkasaservice&type=link' },\n                        ],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Post Start Url Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n                        for (const post of results) {\n                            checkPost(post, runResult);\n                        }\n                    },\n                );\n            });\n\n            it('should search for comments successfully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 10,\n                        maxCommunitiesCount: 0,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 0,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: true,\n                        searchCommunities: false,\n                        searchPosts: false,\n                        searchUsers: false,\n                        searches: ['pizza'],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Comments Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBeWithinRange(1, 12);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const comment of results) {\n                            checkComment(comment, runResult);\n                        }\n                    },\n                );\n            });\n\n            it('should search for users successfully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 0,\n                        maxCommunitiesCount: 10,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 0,\n                        maxPostCount: 0,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: false,\n                        searchUsers: true,\n                        searches: ['pizza'],\n                        sort: 'relevance',\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Users Health Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBeWithinRange(1, 10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const post of results) {\n                            checkPost(post);\n                        }\n                    },\n                );\n            });\n\n            it('should search for community successfully', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 2,\n                        maxCommunitiesCount: 2,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 2,\n                        maxPostCount: 2,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: true,\n                        searchPosts: false,\n                        searchUsers: false,\n                        skipComments: false,\n                        searches: ['pizza'],\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Search Community Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const result of results) {\n                            if (result.dataType === 'post') {\n                                checkPost(result, runResult);\n                            }\n                            if (result.dataType === 'community') {\n                                checkCommunity(result, runResult);\n                            }\n                            if (result.dataType === 'comment') {\n                                checkComment(result, runResult);\n                            }\n                        }\n                    },\n                );\n            });\n\n            it('should scrape community', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 2,\n                        maxCommunitiesCount: 2,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 2,\n                        maxPostCount: 2,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: true,\n                        searchUsers: false,\n                        skipComments: false,\n                        startUrls: [\n                            {\n                                url: 'https://www.reddit.com/r/AskReddit/',\n                            },\n                        ],\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Community Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const result of results) {\n                            if (result.dataType === 'post') {\n                                checkPost(result, runResult);\n                            }\n                            if (result.dataType === 'community') {\n                                checkCommunity(result, runResult);\n                            }\n                            if (result.dataType === 'comment') {\n                                checkComment(result, runResult);\n                            }\n                        }\n                    },\n                );\n            });\n\n            it('should scrape protected community', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 2,\n                        maxCommunitiesCount: 2,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 2,\n                        maxPostCount: 2,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: true,\n                        searchUsers: false,\n                        skipComments: false,\n                        startUrls: [\n                            {\n                                url: 'https://www.reddit.com/r/nsfw/',\n                            },\n                        ],\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Protected Community Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                    expect(log)\n                        .withContext(runResult.format('Log DEBUG'))\n                        .toContain('DEBUG');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(5);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const result of results) {\n                            if (result.dataType === 'post') {\n                                checkPost(result, runResult);\n                            }\n                            if (result.dataType === 'community') {\n                                checkCommunity(result, runResult);\n                            }\n                            if (result.dataType === 'comment') {\n                                checkComment(result, runResult);\n                            }\n                        }\n                    },\n                );\n            });\n\n            it('should scrape popular community', async () => {\n                const runResult = await run({\n                    actorId: 'oAuCIx3ItNrs2okjQ',\n                    input: {\n                        debugMode: true,\n                        maxComments: 2,\n                        maxCommunitiesCount: 2,\n                        maxItems: 10,\n                        maxLeaderBoardItems: 2,\n                        maxPostCount: 2,\n                        proxy: {\n                            useApifyProxy: true,\n                        },\n                        scrollTimeout: 40,\n                        searchComments: false,\n                        searchCommunities: false,\n                        searchPosts: true,\n                        searchUsers: false,\n                        skipComments: false,\n                        skipCommunity: true,\n                        startUrls: [\n                            { url: 'https://www.reddit.com/r/popular/' },\n                        ],\n                    },\n                    options: {\n                        build,\n                    },\n                    name: 'Reddit Popular Community Check',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('Log ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('Log TypeError'))\n                        .not.toContain('TypeError');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(3);\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(1000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(\n                    ({ dataset, info }) => {\n                        expect(info.cleanItemCount)\n                            .withContext(\n                                runResult.format('Dataset cleanItemCount'),\n                            )\n                            .toBe(10);\n\n                        expect(dataset.items)\n                            .withContext(\n                                runResult.format('Dataset items array'),\n                            )\n                            .toBeNonEmptyArray();\n\n                        const results = dataset.items;\n\n                        for (const result of results) {\n                            if (result.dataType === 'post') {\n                                checkPost(result, runResult);\n                            }\n                            if (result.dataType === 'community') {\n                                checkCommunity(result, runResult);\n                            }\n                            if (result.dataType === 'comment') {\n                                checkComment(result, runResult);\n                            }\n                        }\n                    },\n                );\n            });\n        });\n\n        it('should scrape a user a user post and a user comment', async () => {\n            const runResult = await run({\n                actorId: 'oAuCIx3ItNrs2okjQ',\n                input: {\n                    debugMode: true,\n                    maxComments: 1,\n                    maxCommunitiesAndUsers: 5000000,\n                    maxItems: 3,\n                    maxLeaderBoardItems: 5000000,\n                    maxPostCount: 1,\n                    proxy: {\n                        useApifyProxy: true,\n                    },\n                    scrollTimeout: 40,\n                    searchComments: false,\n                    searchCommunities: false,\n                    searchPosts: true,\n                    searchUsers: false,\n                    paid: true,\n                    startUrls: [\n                        {\n                            url: 'https://www.reddit.com/user/BrineOfTheTimes/',\n                        },\n                        {\n                            url: 'https://www.reddit.com/user/BrineOfTheTimes/submitted',\n                        },\n                        {\n                            url: 'https://www.reddit.com/user/BrineOfTheTimes/comments',\n                        },\n                    ],\n                },\n                options: {\n                    build,\n                },\n                name: 'Reddit User Check',\n            });\n\n            await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n            await expectAsync(runResult).withLog((log) => {\n                expect(log)\n                    .withContext(runResult.format('Log ReferenceError'))\n                    .not.toContain('ReferenceError');\n                expect(log)\n                    .withContext(runResult.format('Log TypeError'))\n                    .not.toContain('TypeError');\n                expect(log)\n                    .withContext(runResult.format('Log DEBUG'))\n                    .toContain('DEBUG');\n            });\n\n            await expectAsync(runResult).withStatistics((stats) => {\n                expect(stats.requestsRetries)\n                    .withContext(runResult.format('Request retries'))\n                    .toBeLessThan(5);\n                expect(stats.crawlerRuntimeMillis)\n                    .withContext(runResult.format('Run time'))\n                    .toBeWithinRange(1000, 10 * 60000);\n            });\n\n            await expectAsync(runResult).withDataset(({ dataset, info }) => {\n                expect(info.cleanItemCount)\n                    .withContext(runResult.format('Dataset cleanItemCount'))\n                    .toBe(10);\n\n                expect(dataset.items)\n                    .withContext(runResult.format('Dataset items array'))\n                    .toBeNonEmptyArray();\n\n                const results = dataset.items;\n\n                for (const result of results) {\n                    if (result.dataType === 'post') {\n                        checkPost(result, runResult);\n                    }\n                    if (result.dataType === 'community') {\n                        checkCommunity(result, runResult);\n                    }\n                    if (result.dataType === 'comment') {\n                        checkComment(result, runResult);\n                    }\n                    if (result.dataType === 'user') {\n                        checkUser(result, runResult);\n                    }\n                }\n            });\n        });\n    });\n}",
  "verboseLogs": true
}